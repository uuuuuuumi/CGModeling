import { Easing, Tween, update } from '@tweenjs/tween.js';
import GUI from 'lil-gui';
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';

class ThreeJSContainer {
    private scene: THREE.Scene;
    private light: THREE.DirectionalLight;
    private ambientLight: THREE.AmbientLight;
    private tanuki: THREE.Object3D;
    private onigiri: THREE.Object3D;
    private onigiriLoaded: boolean = false;
    private tanukiLoaded: boolean = false;
    private tanukiTween: Tween<THREE.Vector3>;
    private gui: GUI;
    private guiObj: any;

    constructor() { }

    // ÁîªÈù¢ÈÉ®ÂàÜ„ÅÆ‰ΩúÊàê(Ë°®Á§∫„Åô„ÇãÊû†„Åî„Å®„Å´)
    public createRendererDOM = (width: number, height: number, cameraPos: THREE.Vector3) => {
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(width, height);
        renderer.setClearColor(new THREE.Color(0x87CEEB)); // ËÉåÊôØËâ≤„ÇíÁ©∫„ÅÆËâ≤„Å´Ë®≠ÂÆö
        renderer.shadowMap.enabled = true; // „Ç∑„É£„Éâ„Ç¶„Éû„ÉÉ„Éó„ÇíÊúâÂäπ„Å´„Åô„Çã

        // „Ç´„É°„É©„ÅÆË®≠ÂÆö
        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
        camera.position.copy(cameraPos);
        camera.lookAt(new THREE.Vector3(0, 1, 0)); // „Ç´„É°„É©„Åå„Åü„Å¨„Åç„Çí‰∏≠ÂøÉ„Å´Ë¶ã„Çã„Çà„ÅÜ„Å´Ë®≠ÂÆö

        // OrbitControls„ÅÆË®≠ÂÆö
        const orbitControls = new OrbitControls(camera, renderer.domElement);

        // „Ç∑„Éº„É≥„Å®GUI„ÅÆÂàùÊúüË®≠ÂÆö
        this.createScene();
        this.setupGUI();

        // ÊØé„Éï„É¨„Éº„É†„ÅÆÊõ¥Êñ∞„Å®„É¨„É≥„ÉÄ„É™„É≥„Ç∞
        const render: FrameRequestCallback = (time) => {
            update(time); // TWEEN„ÅÆÊõ¥Êñ∞
            orbitControls.update(); // „Ç´„É°„É©„ÅÆÂà∂Âæ°
            renderer.render(this.scene, camera); // „Ç∑„Éº„É≥„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞
            requestAnimationFrame(render); // Ê¨°„ÅÆ„Éï„É¨„Éº„É†„ÇíÂëº„Å≥Âá∫„Åô
        }
        requestAnimationFrame(render);

        renderer.domElement.style.cssFloat = "left";
        renderer.domElement.style.margin = "10px";
        return renderer.domElement;
    }

    // „Ç∑„Éº„É≥„ÅÆ‰ΩúÊàê(ÂÖ®‰Ωì„Åß1Âõû)
    private createScene = () => {
        this.scene = new THREE.Scene();

        // Áí∞Â¢É„ÅÆËøΩÂä†
        this.addEnvironment();

        // „Åü„Å¨„Åç„É¢„Éá„É´„ÅÆË™≠„ÅøËæº„Åø
        this.loadOBJ("tanuki.obj", "tanuki.mtl", new THREE.Vector3(0, 1, 0), new THREE.Vector3(1.5, 1.5, 1.5), (obj) => {
            this.tanuki = obj;
            this.tanukiLoaded = true;
            this.checkAndStartAnimation();
        });

        // „Åä„Å´„Åé„Çä„É¢„Éá„É´„ÅÆË™≠„ÅøËæº„Åø
        this.loadOBJ("onigiri.obj", "onigiri.mtl", new THREE.Vector3(1.5, 0.5, 0.5), new THREE.Vector3(1, 1, 1), (obj) => {
            this.onigiri = obj;
            this.onigiriLoaded = true;
            this.checkAndStartAnimation();
        });

        // „É©„Ç§„Éà„ÅÆË®≠ÂÆö
        this.light = new THREE.DirectionalLight(0xffffff);
        const lvec = new THREE.Vector3(1, 1, 1).normalize();
        this.light.position.set(lvec.x - 7, lvec.y + 13, lvec.z + 7); // „É©„Ç§„Éà„ÅÆ‰ΩçÁΩÆ„ÇíË™øÊï¥
        this.light.castShadow = true;
        this.scene.add(this.light);

        // Áí∞Â¢ÉÂÖâ„ÅÆË®≠ÂÆö
        this.ambientLight = new THREE.AmbientLight(0x404040); // Áí∞Â¢ÉÂÖâ„ÇíËøΩÂä†
        this.scene.add(this.ambientLight);
    }

    // OBJ„É¢„Éá„É´„ÅÆË™≠„ÅøËæº„Åø
    private loadOBJ = (objFilePath: string, mtlFilePath: string, position: THREE.Vector3, scale: THREE.Vector3, callback: (obj: THREE.Object3D) => void) => {
        const mtlLoader = new MTLLoader();
        mtlLoader.load(mtlFilePath, (materials) => {
            materials.preload();
            const objLoader = new OBJLoader();
            objLoader.setMaterials(materials);
            objLoader.load(objFilePath, (obj) => {
                obj.position.copy(position);
                obj.scale.copy(scale); // „É¢„Éá„É´„ÅÆ„Çπ„Ç±„Éº„É´„ÇíË®≠ÂÆö
                obj.rotation.y = Math.PI; // „É¢„Éá„É´„ÅÆÂêë„Åç„ÇíË™øÊï¥
                obj.castShadow = true;
                obj.receiveShadow = true;
                this.scene.add(obj);
                callback(obj);
            });
        });
    }

    // Áí∞Â¢É„ÅÆËøΩÂä†
    private addEnvironment = () => {
        // Âú∞Èù¢„ÅÆËøΩÂä†
        const groundGeometry = new THREE.PlaneGeometry(100, 100);
        const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x228B22 }); // Âú∞Èù¢„ÅÆËâ≤„ÇíÂ§âÊõ¥
        const ground = new THREE.Mesh(groundGeometry, groundMaterial);
        ground.rotation.x = -Math.PI / 2;
        ground.receiveShadow = true;
        this.scene.add(ground);

        // Â∑ù„ÅÆËøΩÂä†
        const riverGeometry = new THREE.PlaneGeometry(20, 5);
        const riverMaterial = new THREE.MeshStandardMaterial({ color: 0x1E90FF });
        const river = new THREE.Mesh(riverGeometry, riverMaterial);
        river.rotation.x = -Math.PI / 2;
        river.position.set(0, 0.01, 10);
        river.receiveShadow = true;
        this.scene.add(river);

        // Êú®„ÄÖ„ÅÆËøΩÂä†
        const treePositions = [
            { x: -5, y: 2.5, z: -5 },
            { x: 5, y: 2.5, z: -5 },
            { x: -5, y: 2.5, z: 5 },
            { x: 5, y: 2.5, z: 5 },
        ];

        const treeGeometry = new THREE.CylinderGeometry(0.5, 0.5, 5);
        const treeMaterial = new THREE.MeshStandardMaterial({ color: 0x8B4513 });
        const foliageGeometry = new THREE.SphereGeometry(2);

        treePositions.forEach((position, index) => {
            const tree = new THREE.Mesh(treeGeometry, treeMaterial);
            tree.position.set(position.x, position.y, position.z);
            tree.castShadow = true;
            this.scene.add(tree);

            const foliageMaterial = new THREE.MeshStandardMaterial({ color: index % 2 === 0 ? 0x2E8B57 : 0x808000 }); // ‰∫§‰∫í„Å´Ëâ≤„ÇíË®≠ÂÆö
            const foliage = new THREE.Mesh(foliageGeometry, foliageMaterial);
            foliage.position.set(position.x, position.y + 3, position.z);
            foliage.castShadow = true;
            this.scene.add(foliage);

            // Âè≥Ââç„ÅÆÊú®„ÅÆÂ∑¶ÂÅ¥„Å´Á©¥„ÇíËøΩÂä†
            if (index === 3) {
                const holeGeometry = new THREE.CircleGeometry(1.7, 35); // ÂÜÜ„ÅÆÂ§ß„Åç„Åï„ÇíË®≠ÂÆö
                const holeMaterial = new THREE.MeshBasicMaterial({ color: 0x734E30 }); // Âü∫Êú¨„ÅÆÈªíËâ≤„Éû„ÉÜ„É™„Ç¢„É´
                const hole = new THREE.Mesh(holeGeometry, holeMaterial);
                hole.position.set(position.x - 3.0, 0.02, position.z); // YÂ∫ßÊ®ô„ÇíÂú∞Èù¢„Å´Âêà„Çè„Åõ„Çã
                hole.rotation.x = -Math.PI / 2; // ÂÜÜ„ÅåÂú∞Èù¢„Å´ÂØæ„Åó„Å¶Ê∞¥Âπ≥„Å´„Å™„Çã„Çà„ÅÜ„Å´ÂõûËª¢
                hole.castShadow = true;
                this.scene.add(hole);
            }
        });
    }

    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Å®ÈñãÂßã
    private checkAndStartAnimation = () => {
        if (this.onigiriLoaded && this.tanukiLoaded) {
            const holePosition = new THREE.Vector3(2, 0, 5); // Á©¥„ÅÆ‰ΩçÁΩÆ

            // „Åä„Å´„Åé„Çä„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            const onigiriTween = new Tween(this.onigiri.position)
                .to({ x: holePosition.x, z: holePosition.z }, 5000) // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊôÇÈñì„Çí5Áßí„Å´Ë®≠ÂÆö
                .easing(Easing.Quadratic.InOut)
                .onUpdate(() => {
                    this.onigiri.rotation.x += 0.05; // ‰∏ÄÂÆö„ÅÆÂõûËª¢ÈÄüÂ∫¶„ÅßÂõûËª¢
                })
                .onComplete(() => {
                    // „Åä„Å´„Åé„Çä„ÅåÁ©¥„Å´Âà∞ÈÅî„Åó„Åü„Çâ‰∏ã„Å´ËêΩ„Å°„Çã
                    new Tween(this.onigiri.position)
                        .to({ y: -2 }, 1000)
                        .easing(Easing.Quadratic.In)
                        .start();
                });

            // „Åü„Å¨„Åç„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            this.tanukiTween = new Tween(this.tanuki.position)
                .to({ x: holePosition.x, z: holePosition.z }, 5000) // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊôÇÈñì„Çí5Áßí„Å´Ë®≠ÂÆö
                .easing(Easing.Quadratic.InOut)
                .delay(3000) // „Åä„Å´„Åé„Çä„ÅåÂãï„ÅçÂßã„ÇÅ„Å¶„Åã„Çâ3ÁßíÈÅÖ„Çå„Å¶„Åü„Å¨„Åç„ÅåÂãï„ÅçÂá∫„Åô
                .onUpdate(() => {
                    this.tanuki.position.y = 1; // „Åü„Å¨„Åç„ÅÆÈ´ò„Åï„Çí‰∏ÄÂÆö„Å´‰øù„Å§
                })
                .onComplete(() => {
                    // „Åü„Å¨„Åç„ÅåÁ©¥„Å´Âà∞ÈÅî„Åó„Åü„Çâ‰∏ã„Å´ËêΩ„Å°„Çã
                    new Tween(this.tanuki.position)
                        .to({ y: -2 }, 1000)
                        .easing(Easing.Quadratic.In)
                        .start();
                });

            onigiriTween.start();
            this.tanukiTween.start();
        }
    }

    // GUI„ÅÆË®≠ÂÆö
    private setupGUI = () => {
        this.gui = new GUI();
        this.guiObj = { stopTanuki: () => this.stopTanuki() };
        this.gui.add(this.guiObj, 'stopTanuki').name('„Åü„Å¨„Åç„ÇíÂä©„Åë„Çãüçôüí®');
    }

    // „Åü„Å¨„Åç„ÇíÊ≠¢„ÇÅ„ÇãÈñ¢Êï∞
    private stopTanuki = () => {
        if (this.tanukiTween) {
            this.tanukiTween.stop();
        }
    }
}

window.addEventListener("DOMContentLoaded", init);

function init() {
    let container = new ThreeJSContainer();
    let viewport = container.createRendererDOM(640, 480, new THREE.Vector3(0, 5, 15)); // „Ç´„É°„É©„ÅÆ‰ΩçÁΩÆ„ÇíË™øÊï¥
    document.body.appendChild(viewport);
}
